import { useFormik } from "formik";
import * as yup from "yup";

export const useKpPrevFormValidationSchema = (
  onSubmit,
  initialValues
) => {
  const kpPrevFormIntialValues = {
    dateServiceOffered: "",
    offeredHts: "",
    acceptedHts: "",
    hivTestResult: "",
    referredForArt: "",
    offeredPrep: "",
    acceptedPrep: "",
    referredForPrep: "",
    condomDispensed: "",
    howManyCondomDispensed: "",
    lubricantsDispensed: "",
    howManyLubricantsDispensed: "",
    oralQuickDispensed: "",
    howManyOralQuickDispensed: "",
    newNeedleDispensed: "",
    howManyNewNeedleDispensed: "",
    oldNeedleRetrieved: "",
    howManyOldNeedleRetrieved: "",
    nalxoneProvided: "",
    howManyNalxoneProvided: "",
    iecMaterial: "",
    interPersonalCommunication: "",
    peerGroupCommunication: "",
    stiScreening: "",
    stiScreeningResult: "",
    stiTreatment: "",
    stiFacilityReffered: "",
    stiSyndromicManagement: "",
    screenedForTb: "",
    providedWithTpt: "",
    tbTreatmentRefferal: "",
    tbFacilityReffered: "",
    screenedForViralHepatits: "",
    viralHepatitsScreenResult: "",
    offeredFamilyPlanningServices: "",
    referredForFamilyPlanningServices: "",
    providedWithinDrugRehab: "",
    offeredMhpss: "",
    typeOfMhpss: "",
    refferedFacilityDrugRehab: "",
    drugRehabFacilityReffered: "",
    onMedicalAssistedTherapy: "",
    receivedNalxoneForOverdoseTreatment: "",
    providedOrRefferedForEmpowerment: "",
    legalAidServiceType: "",
    typeLegalEmpowerment: "",
    legalProgramReferred: "",
    serviceProvider: "",
    typeEmpowermentprovided: "",
    facilityRefferedToRecievedNalxoneForOverdoseTreatment: "",
    empowermentProgramReferred: "",
    serviceProviderSignature: ""
  };

  const kpPrevFormInitialSchema = yup.object({
    dateServiceOffered: yup.date().required("This field is required"),
    offeredHts: yup.string(),
    acceptedHts: yup.string(),
    hivTestResult: yup.string(),
    referredForArt: yup.string(),
    offeredPrep: yup.string(),
    acceptedPrep: yup.string(),
    referredForPrep: yup.string(),
    condomDispensed: yup.string(),
    howManyCondomDispensed: yup.number(),
    lubricantsDispensed: yup.string(),
    howManyLubricantsDispensed: yup.number(),
    oralQuickDispensed: yup.string(),
    howManyOralQuickDispensed: yup.number(),
    newNeedleDispensed: yup.string(),
    howManyNewNeedleDispensed: yup.number(),
    oldNeedleRetrieved: yup.string(),
    howManyOldNeedleRetrieved: yup.number(),
    nalxoneProvided: yup.string(),
    howManyNalxoneProvided: yup.number(),
    iecMaterial: yup.string(),
    interPersonalCommunication: yup.string(),
    peerGroupCommunication: yup.string(),
    stiScreening: yup.string(),
    stiScreeningResult: yup.string(),
    stiTreatment: yup.string(),
    stiFacilityReffered: yup.string(),
    stiSyndromicManagement: yup.string(),
    screenedForTb: yup.string(),
    providedWithTpt: yup.string(),
    tbTreatmentRefferal: yup.string(),
    tbFacilityReffered: yup.string(),
    screenedForViralHepatits: yup.string(),
    vaccinationForViralHepatits: yup.string(),
    viralHepatitsScreenResult: yup.string(),
    offeredFamilyPlanningServices: yup.string(),
    referredForFamilyPlanningServices: yup.string(),
    providedWithinDrugRehab: yup.string(),
    offeredMhpss: yup.string(),
    typeOfMhpss: yup.string(),
    refferedFacilityDrugRehab: yup.string(),
    drugRehabFacilityReffered: yup.string(),
    onMedicalAssistedTherapy: yup.string(),
    receivedNalxoneForOverdoseTreatment: yup.string(),
    providedOrRefferedForEmpowerment: yup.string(),
    legalAidServiceType: yup.string(),
    typeLegalEmpowerment: yup.string(),
    legalProgramReferred: yup.string(),
    serviceProvider: yup.string(),
    typeEmpowermentprovided: yup.string(),
    empowermentProgramReferred: yup.string(),
    serviceProviderSignature: yup.string(),
    facilityRefferedToRecievedNalxoneForOverdoseTreatment: yup.string(),
  });

  const formik = useFormik({
    initialValues: initialValues
      ? { ...kpPrevFormIntialValues, ...initialValues }
      : kpPrevFormIntialValues,
    onSubmit,
    validationSchema: kpPrevFormInitialSchema,
  });
  return { formik };
};
